-- Connect as postgres
-- psql -U postgres
-- CREATE DATABASE employee_attendance;
-- \c employee_attendance

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Drop tables in reverse dependency order
DROP TABLE IF EXISTS users_archive CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS incident_reports_archive CASCADE;
DROP TABLE IF EXISTS incident_reports CASCADE;
DROP TABLE IF EXISTS employee_attendance_archive CASCADE;
DROP TABLE IF EXISTS employee_attendance CASCADE;
DROP TABLE IF EXISTS employee_documents_archive CASCADE;
DROP TABLE IF EXISTS employee_documents CASCADE;
DROP TABLE IF EXISTS employee_dependents_archive CASCADE;
DROP TABLE IF EXISTS employee_dependents CASCADE;
DROP TABLE IF EXISTS employee_contracts_archive CASCADE;
DROP TABLE IF EXISTS employee_contracts CASCADE;
DROP TABLE IF EXISTS leave_requests_archive CASCADE;
DROP TABLE IF EXISTS leave_requests CASCADE;
DROP TABLE IF EXISTS overtime_requests_archive CASCADE;
DROP TABLE IF EXISTS overtime_requests CASCADE;
DROP TABLE IF EXISTS employee_notifications CASCADE;
DROP TABLE IF EXISTS employee_schedule CASCADE;
DROP TABLE IF EXISTS employees_archive CASCADE;
DROP TABLE IF EXISTS employees CASCADE;
DROP TABLE IF EXISTS employee_registry CASCADE;
DROP TABLE IF EXISTS employee_deletion_schedule;
DROP SEQUENCE IF EXISTS employee_id_seq;

-- Sequence for employee IDs
CREATE SEQUENCE employee_id_seq START 1;

-- Employee Registry
CREATE TABLE employee_registry (
    id SERIAL PRIMARY KEY,
    email TEXT UNIQUE NOT NULL,
    fullname TEXT UNIQUE NOT NULL,
    CONSTRAINT unique_email_fullname UNIQUE (email, fullname)
);

-- Employees table
CREATE TABLE employees (
    employee_id TEXT PRIMARY KEY DEFAULT 
        'TCBS' || TO_CHAR(NOW(), 'YYYY') || '-' || LPAD(nextval('employee_id_seq')::text, 4, '0'),
    fullname VARCHAR(100) UNIQUE,
    nickname VARCHAR(50),
    email VARCHAR(100) UNIQUE,
    position VARCHAR(100),
    employment_type VARCHAR(50),
    gender VARCHAR(10),
    contact VARCHAR(20),
    marital_status VARCHAR(20),
    birthday DATE,
    address VARCHAR(150),
    sss_number VARCHAR(20),
    pagibig VARCHAR(20),
    philhealth VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    current_status VARCHAR(20),
    status VARCHAR(20),
    effective_deletion_date DATE,
    deletion_status VARCHAR(20),
    is_restored BOOLEAN DEFAULT FALSE,
    age INT,
    registry_id INT UNIQUE REFERENCES employee_registry(id) ON DELETE CASCADE,
    is_synced BOOLEAN DEFAULT false
);

-- Archive Employees
CREATE TABLE employees_archive (
    employee_id TEXT PRIMARY KEY,
    fullname VARCHAR(100),
    nickname VARCHAR(50),
    email VARCHAR(100),
    position VARCHAR(100),
    employment_type VARCHAR(50),
    gender VARCHAR(10),
    contact VARCHAR(20),
    marital_status VARCHAR(20),
    birthday DATE,
    address VARCHAR(150),
    sss_number VARCHAR(20),
    pagibig VARCHAR(20),
    philhealth VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    current_status VARCHAR(20),
    status VARCHAR(20),
    is_restored BOOLEAN DEFAULT FALSE,
    age INT,
    registry_id INT UNIQUE REFERENCES employee_registry(id) ON DELETE CASCADE,
    CONSTRAINT unique_employee_archive_row UNIQUE(employee_id, fullname, email)
);

-- Employee Contracts
CREATE TABLE employee_contracts (
    contract_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees(employee_id) ON DELETE CASCADE,
    start_of_contract TIMESTAMP,
    end_of_contract TIMESTAMP,
    contract_type TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE employee_contracts_archive (
    contract_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees_archive(employee_id) ON DELETE CASCADE,
    start_of_contract TIMESTAMP,
    end_of_contract TIMESTAMP,
    contract_type TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Employee Documents
CREATE TABLE employee_documents (
	document_id SERIAL PRIMARY KEY,
	employee_id TEXT NOT NULL REFERENCES employees(employee_id) ON DELETE CASCADE,
	document_type VARCHAR(100) NOT NULL,
	link TEXT NOT NULL,
	status VARCHAR(20) DEFAULT 'Pending' CHECK (status IN ('Pending', 'Approved', 'Incomplete')),
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UNIQUE (employee_id, document_type)
);

CREATE TABLE employee_documents_archive (
    document_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees_archive(employee_id) ON DELETE CASCADE,
    document_type VARCHAR(100) NOT NULL,
    link TEXT NOT NULL,
    status VARCHAR(20) DEFAULT 'Pending' CHECK (status IN ('Pending', 'Approved', 'Incomplete')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (employee_id, document_type)
);

-- Employee Dependents
CREATE TABLE employee_dependents (
    id SERIAL PRIMARY KEY,
    employee_id TEXT UNIQUE REFERENCES employees(employee_id) ON DELETE CASCADE,
    fullname VARCHAR(100),
    relationship VARCHAR(50),
    address VARCHAR(150),
    contact VARCHAR(20),
    city VARCHAR(50),
    postalcode VARCHAR(10),
    gcash_number VARCHAR(20)
);

CREATE TABLE employee_dependents_archive (
    id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees_archive(employee_id) ON DELETE CASCADE,
    fullname VARCHAR(100),
    relationship VARCHAR(50),
    address VARCHAR(150),
    contact VARCHAR(20),
    city VARCHAR(50),
    postalcode VARCHAR(10),
    gcash_number VARCHAR(20)
);

-- Requests
CREATE TABLE leave_requests (
    request_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees(employee_id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    days INT,
    start_date DATE,
    end_date DATE,
    reason TEXT,
    remarks TEXT DEFAULT '',
    attach_link TEXT,
    status VARCHAR(50) DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE leave_requests_archive (
    request_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees_archive(employee_id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    days INT,
    start_date DATE,
    end_date DATE,
    reason TEXT,
    remarks TEXT DEFAULT '',
    attach_link TEXT,
    status VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE overtime_requests (
    request_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees(employee_id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    date DATE,
    hours DECIMAL(5,2),
    reason TEXT,
    remarks TEXT DEFAULT '',
    attach_link TEXT,
    status VARCHAR(50) DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE overtime_requests_archive (
    request_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees_archive(employee_id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    date DATE,
    hours DECIMAL(5,2),
    reason TEXT,
    remarks TEXT DEFAULT '',
    attach_link TEXT,
    status VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE offset_requests (
    request_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees(employee_id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    date DATE,
    hours DECIMAL(5,2),
    reason TEXT,
    remarks TEXT DEFAULT '',
    attach_link TEXT,
    status VARCHAR(50) DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE offset_requests_archive (
    request_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees_archive(employee_id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    date DATE,
    hours DECIMAL(5,2),
    reason TEXT,
    remarks TEXT DEFAULT '',
    attach_link TEXT,
    status VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE employee_notifications (
    employee_id TEXT PRIMARY KEY REFERENCES employees(employee_id) ON DELETE CASCADE,
    count INT DEFAULT 0
);

CREATE TABLE notifications (
    id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees(employee_id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    action VARCHAR(50) NOT NULL,
    message TEXT,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Attendance
CREATE TABLE employee_attendance (
    attendance_id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees(employee_id),
    attend_date DATE NOT NULL,
    clock_in TIME NOT NULL,
    clock_out TIME NOT NULL,
    total_hours DECIMAL(5,2) NOT NULL,
    status VARCHAR(100)
);

CREATE TABLE employee_attendance_archive (
    attendance_id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees_archive(employee_id),
    attend_date DATE NOT NULL,
    clock_in TIME NOT NULL,
    clock_out TIME NOT NULL,
    total_hours DECIMAL(5,2) NOT NULL,
    status VARCHAR(100)
);

-- Employee Schedule
CREATE TABLE employee_schedule (
    schedule_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees(employee_id, work_date) ON DELETE CASCADE,
    work_date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    task VARCHAR(255),
    status VARCHAR(20),
    work_location VARCHAR(50),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Users
CREATE TABLE users (
    account_id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees(employee_id) ON DELETE SET NULL,
    fullname VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role VARCHAR(50) NOT NULL,
    must_change_password BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE users_archive (
    account_id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees_archive(employee_id) ON DELETE CASCADE,
    fullname VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    password TEXT,
    role VARCHAR(50) NOT NULL,
    must_change_password BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

-- Audit Logs
CREATE TABLE audit_logs (
    log_id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees(employee_id) ON DELETE CASCADE,
    action VARCHAR(255) NOT NULL,
    action_time TIMESTAMP DEFAULT NOW(),
    remarks TEXT
);

-- Incident Reports
CREATE TABLE incident_reports (
    incident_id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees(employee_id),
    incident_type VARCHAR(100),
    incident_date DATE NOT NULL,
    witness VARCHAR(100),
    reported_by VARCHAR(100),
    description VARCHAR(100),
    status VARCHAR(50)
);

CREATE TABLE incident_reports_archive (
    incident_id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees_archive(employee_id),
    incident_type VARCHAR(100),
    incident_date DATE NOT NULL,
    witness VARCHAR(100),
    reported_by VARCHAR(100),
    description VARCHAR(100),
    status VARCHAR(50)
);

CREATE TABLE employee_deletion_schedule (
    schedule_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees(employee_id) ON DELETE CASCADE,
    deletion_date TIMESTAMP WITH TIME ZONE NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'Scheduled', 
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

ALTER TABLE employee_schedule
ADD CONSTRAINT uniq_employee_day UNIQUE (employee_id, work_date);
