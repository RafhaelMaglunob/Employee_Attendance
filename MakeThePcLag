import React, { useState, useEffect } from "react";
import { Button } from "./component/ui/button";
import DynamicForm from "./component/form/Form";
import { eachDayOfInterval, parseISO } from "date-fns";

const tabList = ["Leave", "Overtime", "Off-set"];

const leaveFields = [
  { name: "type", label: "Type of Leave", type: "select", options: ["Sick Leave", "Emergency Leave", "Vacation Leave"] },
  { name: "startDate", label: "Start Date", type: "date" },
  { name: "endDate", label: "End Date", type: "date" },
  { name: "days", label: "Days of Leave", type: "number", disabled: true },
  { name: "reason", label: "Reason", type: "textarea", fullWidth: true },
  { name: "link", label: "Attach Link", type: "text", fullWidth: true },
];

const overtimeFields = [
  { name: "type", label: "Select Type", type: "select", options: ["Early-in", "Overtime"] },
  { name: "date", label: "Date", type: "date" },
  { name: "hours", label: "Requested Hours", type: "number" },
  { name: "reason", label: "Reason", type: "textarea" },
  { name: "link", label: "Attach Link", type: "text", fullWidth: true },
];

const offsetFields = [
  { name: "startDate", label: "Start Date", type: "date", fullWidth: true },
  { name: "shift", label: "Type of Shift", type: "select", options: ["Early-in", "Overtime"] },
  { name: "hour", label: "Total Hours", type: "input" },
  { name: "returnDate", label: "Date of Return", type: "date", fullWidth: true },
  { name: "reason", label: "Reason", type: "textarea" },
  { name: "link", label: "Attach Link", type: "text", fullWidth: true },
];

function EmployeeReport() {
  const employeeId = localStorage.getItem("employeeId");
  const savedTab = (localStorage.getItem("employeeTabs") || "leave").toLowerCase();
  const [activeTab, setActiveTab] = useState(savedTab);
  const [formValues, setFormValues] = useState({});
  const [recentRequests, setRecentRequests] = useState([]);
  const [scheduleDays, setScheduleDays] = useState([]);

  const today = new Date().toISOString().split("T")[0]; // YYYY-MM-DD

  // Fetch schedule
  useEffect(() => {
    const fetchSchedule = async () => {
      try {
        const res = await fetch(`http://localhost:3001/api/employee/schedule/${employeeId}`);
        const data = await res.json();
        if (data.success) {
          const weekdays = data.data.map(d =>
            new Date(d.work_date).toLocaleDateString("en-US", { weekday: "short" })
          );
          setScheduleDays([...new Set(weekdays)]);
        }
      } catch (err) {
        console.error("Error fetching schedule:", err);
      }
    };
    fetchSchedule();
  }, [employeeId]);

  // Fetch recent requests
  const fetchRecentRequests = async () => {
    try {
      const res = await fetch(`http://localhost:3001/api/employee/requests/${employeeId}`);
      const data = await res.json();
      if (data.success) setRecentRequests(data.data);
    } catch (err) {
      console.error("Error fetching requests:", err);
    }
  };
  useEffect(() => { fetchRecentRequests(); }, [activeTab]);

  // Live calculate leave days
  useEffect(() => {
    if (activeTab !== "leave") return;
    const { startDate, endDate } = formValues;
    if (startDate && endDate && scheduleDays.length) {
      const allDays = eachDayOfInterval({ start: parseISO(startDate), end: parseISO(endDate) });
      const leaveDays = allDays.filter(day =>
        scheduleDays.includes(day.toLocaleDateString("en-US", { weekday: "short" }))
      ).length;
      if (formValues.days !== leaveDays) setFormValues(prev => ({ ...prev, days: leaveDays }));
    }
  }, [formValues.startDate, formValues.endDate, scheduleDays, activeTab]);

  const handleSubmit = async (data) => {
    try {
      const payload = { ...data, request_type: activeTab };
      const res = await fetch(`http://localhost:3001/api/employee/request/${employeeId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const result = await res.json();
      if (result.success) {
        alert("Request submitted!");
        setFormValues({});
        fetchRecentRequests();
      } else alert("Error: " + result.message);
    } catch (err) {
      console.error("Submit error:", err);
      alert("Failed to submit request");
    }
  };

  const getFields = () => {
    let fields = [];
    switch (activeTab) {
      case "leave": fields = leaveFields; break;
      case "overtime": fields = overtimeFields; break;
      case "off-set": fields = offsetFields; break;
      default: fields = []; break;
    }

    // Add min=today to date fields
    return fields.map(f => f.type === "date" ? { ...f, min: today } : f);
  };

  return (
    <div className="font-inter">
      <div className="flex justify-between w-full text-lg border-b">
        {tabList.map((tab, index) => (
          <Button
            key={index}
            onClick={() => {
              const lowerTab = tab.toLowerCase();
              setActiveTab(lowerTab);
              localStorage.setItem("employeeTabs", lowerTab);
            }}
            className={`border-b-2 pb-2 w-full ${activeTab === tab.toLowerCase() ? "border-current" : "border-transparent"}`}
          >
            {tab}
          </Button>
        ))}
      </div>

      <div className="mt-4 space-y-3">
        <h1 className="font-semibold text-xl">
          {activeTab === "leave" && "Leave Request"}
          {activeTab === "overtime" && "Overtime Request"}
          {activeTab === "off-set" && "Off-set"}
        </h1>
        {activeTab === "leave" && <p className="text-md mb-5">Submit a request for time off</p>}

        <DynamicForm
          fields={getFields()}
          formValues={formValues}
          onFieldChange={(name, value) => setFormValues(prev => ({ ...prev, [name]: value }))}
          onSubmit={handleSubmit}
        />

        <div className="mt-10 mb-7">
          <h1 className="font-semibold text-lg">Recent Requests</h1>
          {recentRequests.length === 0 && <p>No recent requests</p>}
          {recentRequests.map(req => (
            <div key={req.request_id} className="border p-2 mb-2 rounded shadow-sm">
              <p><strong>Type:</strong> {req.request_type}</p>
              <p><strong>Details:</strong> {req.reason || req.type}</p>
              <p><strong>Date:</strong> {req.date || req.start_date}</p>
              {req.request_type === "leave" && <p><strong>Days:</strong> {req.days}</p>}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default EmployeeReport;
