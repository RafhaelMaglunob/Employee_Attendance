-- Connect as postgres
-- psql -U postgres

-- Create database
-- CREATE DATABASE employee_attendance;
-- \c employee_attendance

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Sequence for employee IDs
CREATE SEQUENCE employee_id_seq START 1;

-- Employee Registry
CREATE TABLE employee_registry (
    id SERIAL PRIMARY KEY,
    email TEXT UNIQUE NOT NULL,
    fullname TEXT UNIQUE NOT NULL
);

-- Employees table
CREATE TABLE IF NOT EXISTS employees (
    employee_id TEXT PRIMARY KEY DEFAULT 
        'TCBS' || TO_CHAR(NOW(), 'YYYY') || '-' || LPAD(nextval('employee_id_seq')::text, 4, '0'),
    fullname VARCHAR(100),
    nickname VARCHAR(50),
    email VARCHAR(100),
    position VARCHAR(100),
    employment_type VARCHAR(50),
    gender VARCHAR(10),
    contact VARCHAR(20),
    marital_status VARCHAR(20),
    birthday DATE,
    address VARCHAR(150),
    sss_number VARCHAR(20),
    pagibig VARCHAR(20),
    philhealth VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    current_status VARCHAR(20),
    status VARCHAR(20),
    effective_deletion_date DATE,
    deletion_status VARCHAR(20),
    is_restored BOOLEAN DEFAULT FALSE
);

CREATE TABLE IF NOT EXISTS employee_contracts (
    contract_id SERIAL PRIMARY KEY,       -- unique contract ID
    employee_id TEXT NOT NULL,            -- reference to employee
    start_of_contract TIMESTAMP NOT NULL, -- start date/time
    end_of_contract TIMESTAMP NOT NULL,   -- end date/time
    contract_type TEXT NOT NULL,          -- e.g., "Full-Time" or "Part-Time"
    created_at TIMESTAMP DEFAULT NOW(),   -- when contract was created
    updated_at TIMESTAMP DEFAULT NOW(),   -- last updated timestamp
    CONSTRAINT fk_employee
        FOREIGN KEY (employee_id)
        REFERENCES employees(employee_id)
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS employee_contracts_archive (
    contract_id SERIAL PRIMARY KEY,       -- same as original
    employee_id TEXT NOT NULL,            -- employee ID reference
    start_of_contract TIMESTAMP NOT NULL,
    end_of_contract TIMESTAMP NOT NULL,
    contract_type TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);


ALTER TABLE employees ADD CONSTRAINT unique_email UNIQUE(email);
ALTER TABLE employees ADD CONSTRAINT unique_fullname UNIQUE(fullname);

-- Employee Documents
CREATE TABLE IF NOT EXISTS employee_documents (
    document_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    employee_id TEXT NOT NULL REFERENCES employees(employee_id) ON DELETE CASCADE,
    sss_id VARCHAR(255),
    resume_cv VARCHAR(255),
    pagibig VARCHAR(255),
    philhealth VARCHAR(255),
    barangay_clearance VARCHAR(255),
    status VARCHAR(20) DEFAULT 'Incomplete',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Employee Dependents
CREATE TABLE IF NOT EXISTS employee_dependents (
    id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees(employee_id) ON DELETE CASCADE,
    fullname VARCHAR(100),
    relationship VARCHAR(50),
    address VARCHAR(150),
    contact VARCHAR(20),
    city VARCHAR(50),
    postalcode VARCHAR(10),
    gcash_number VARCHAR(20)
);

CREATE TABLE employee_requests (
    request_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees(employee_id), 
    request_type VARCHAR(20) CHECK (request_type IN ('leave', 'overtime', 'off-set')) NOT NULL,
    type VARCHAR(50),
    days INTEGER,
    start_date DATE,
    end_date DATE,
    date DATE,
    hours NUMERIC,
    status VARCHAR(20) DEFAULT 'pending' 
        CHECK (status IN ('pending', 'approved', 'rejected', 'partial')),
    admin_comment TEXT,
    shift VARCHAR(20),
    return_date DATE,
    remarks TEXT,
    reason TEXT,
    link TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- Archive Employees (independent of original employees)
CREATE TABLE IF NOT EXISTS employees_archive (
    employee_id TEXT PRIMARY KEY,
    fullname VARCHAR(100),
    nickname VARCHAR(50),
    email VARCHAR(100),
    position VARCHAR(100),
    employment_type VARCHAR(50),
    gender VARCHAR(10),
    contact VARCHAR(20),
    marital_status VARCHAR(20),
    birthday DATE,
    address VARCHAR(150),
    sss_number VARCHAR(20),
    pagibig VARCHAR(20),
    philhealth VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    current_status VARCHAR(20),
    status VARCHAR(20),
    is_restored BOOLEAN DEFAULT FALSE,
    CONSTRAINT unique_employee_archive_row UNIQUE(employee_id, fullname, email)
);

CREATE TABLE IF NOT EXISTS employee_contracts_archive (
    contract_id SERIAL PRIMARY KEY,
    employee_id VARCHAR(20) REFERENCES employees_archive(employee_id) ON DELETE CASCADE,
    start_of_contract DATE NOT NULL,
    end_of_contract DATE NOT NULL,
    contract_type VARCHAR(50), -- e.g., "Full-Time", "Part-Time", "Probation"
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Archive Employee Documents (FK points to archive, NOT original)
CREATE TABLE IF NOT EXISTS employee_documents_archive (
    document_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    employee_id TEXT NOT NULL REFERENCES employees_archive(employee_id) ON DELETE CASCADE,
    sss_id VARCHAR(255),
    resume_cv VARCHAR(255),
    pagibig VARCHAR(255),
    philhealth VARCHAR(255),
    barangay_clearance VARCHAR(255),
    status VARCHAR(20) DEFAULT 'Incomplete',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Archive Employee Dependents (FK points to archive)
CREATE TABLE IF NOT EXISTS employee_dependents_archive (
    id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees_archive(employee_id) ON DELETE CASCADE,
    fullname VARCHAR(100),
    relationship VARCHAR(50),
    address VARCHAR(150),
    contact VARCHAR(20),
    city VARCHAR(50),
    postalcode VARCHAR(10),
    gcash_number VARCHAR(20)
);

-- Audit Logs
CREATE TABLE IF NOT EXISTS audit_logs (
    log_id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees(employee_id),
    action VARCHAR(255) NOT NULL,
    action_time TIMESTAMP DEFAULT NOW(),
    remarks TEXT
);

-- Incident Reports
CREATE TABLE IF NOT EXISTS incident_reports_archive (
    incident_id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees_archive(employee_id),
    incident_type VARCHAR(100),
    incident_date DATE NOT NULL,
    witness VARCHAR(100),
    reported_by VARCHAR(100),
    description VARCHAR(100),
    status VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS incident_reports (
    incident_id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees(employee_id),
    incident_type VARCHAR(100),
    incident_date DATE NOT NULL,
    witness VARCHAR(100),
    reported_by VARCHAR(100),
    description VARCHAR(100),
    status VARCHAR(50)
);

CREATE TABLE users (
    account_id SERIAL PRIMARY KEY,                  -- unique account ID
    employee_id TEXT NULL,                          -- optional, links to employees
    fullname VARCHAR(100) NOT NULL,                -- required for Admins, optional if linked to employee
    email VARCHAR(100) UNIQUE NOT NULL,            -- login email
    password TEXT NOT NULL,                         -- hashed password
    role VARCHAR(50) NOT NULL,                     -- Admin, HR, Head Staff, Crew
    must_change_password BOOLEAN DEFAULT FALSE,    -- flag for first login
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_users_employee FOREIGN KEY (employee_id)
        REFERENCES employees(employee_id)
        ON DELETE SET NULL
);

CREATE TABLE users_archive (
    account_id SERIAL PRIMARY KEY,               -- unique ID for archived account
    employee_id TEXT NULL,                       -- optional, may not exist in employees table
    fullname VARCHAR(100) NOT NULL,             -- name at time of archive
    email VARCHAR(100),                          -- optional, may be blank
    password TEXT,                               -- hashed password
    role VARCHAR(50) NOT NULL,                  -- Admin, HR, Head Staff, Crew
    must_change_password BOOLEAN DEFAULT FALSE, -- same as active table
    created_at TIMESTAMP,                        -- original account creation
    updated_at TIMESTAMP                         -- last update before archive
);



-- Attendance
CREATE TABLE IF NOT EXISTS employee_attendance (
    attendance_id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees(employee_id),
    attend_date DATE NOT NULL,
    clock_in TIME NOT NULL,
    clock_out TIME NOT NULL,
    total_hours DECIMAL(5,2) NOT NULL,
    status VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS employee_attendance_archive (
    attendance_id SERIAL PRIMARY KEY,
    employee_id TEXT REFERENCES employees_archive(employee_id),
    attend_date DATE NOT NULL,
    clock_in TIME NOT NULL,
    clock_out TIME NOT NULL,
    total_hours DECIMAL(5,2) NOT NULL,
    status VARCHAR(100)
);


CREATE TABLE IF NOT EXISTS employee_schedule (
    schedule_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL,          -- match type in employees table
    work_date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    task VARCHAR(255),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),

    CONSTRAINT fk_employee
        FOREIGN KEY(employee_id)
        REFERENCES employees(employee_id)
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS leave_requests (
    request_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees(employee_id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    days INT,
    start_date DATE,
    end_date DATE,
    reason TEXT,
    attach_link TEXT,
    status VARCHAR(50) DEFAULT 'Pending', -- optional approval workflow
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS leave_requests_archive (
    request_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees_archive(employee_id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    days INT,
    start_date DATE,
    end_date DATE,
    reason TEXT,
    attach_link TEXT,
    status VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE IF NOT EXISTS overtime_requests (
    request_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees(employee_id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    date DATE,
    hours DECIMAL(5,2),
    reason TEXT,
    attach_link TEXT,
    status VARCHAR(50) DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS overtime_requests_archive (
    request_id SERIAL PRIMARY KEY,
    employee_id TEXT NOT NULL REFERENCES employees_archive(employee_id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    date DATE,
    hours DECIMAL(5,2),
    reason TEXT,
    attach_link TEXT,
    status VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE employee_availability (
    id SERIAL PRIMARY KEY,
    employee_id INT NOT NULL,
    date DATE NOT NULL,
    opening BOOLEAN DEFAULT FALSE,
    closing BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE employees ADD COLUMN age INT;
ALTER TABLE employees_archive ADD COLUMN age INT;

ALTER TABLE audit_logs
DROP CONSTRAINT audit_logs_employee_id_fkey,
ADD CONSTRAINT audit_logs_employee_id_fkey
FOREIGN KEY (employee_id) REFERENCES employees(employee_id) ON DELETE CASCADE;

ALTER TABLE employee_contracts
ALTER COLUMN start_of_contract DROP NOT NULL;
ALTER TABLE employee_contracts_archive
ALTER COLUMN start_of_contract DROP NOT NULL;

ALTER TABLE employee_registry
ADD CONSTRAINT unique_email_fullname UNIQUE (email, fullname);

ALTER TABLE employees
ADD COLUMN registry_id INT UNIQUE REFERENCES employee_registry(id) ON DELETE CASCADE;
ALTER TABLE employees_archive
ADD COLUMN registry_id INT UNIQUE REFERENCES employee_registry(id) ON DELETE CASCADE;
ALTER TABLE employees ADD COLUMN is_synced BOOLEAN DEFAULT false;

ALTER TABLE employee_contracts_archive
ALTER COLUMN start_of_contract DROP NOT NULL;
ALTER TABLE employee_contracts_archive
ALTER COLUMN end_of_contract DROP NOT NULL;

ALTER TABLE employee_dependents
ADD CONSTRAINT employee_dependents_employee_id_unique UNIQUE (employee_id);

ALTER TABLE employee_contracts
ALTER COLUMN end_of_contract DROP NOT NULL;


-- Archive attendance
ALTER TABLE employee_attendance_archive
ALTER COLUMN employee_id TYPE TEXT USING employee_id::text;

-- Archive incident reports
ALTER TABLE incident_reports_archive
ALTER COLUMN employee_id TYPE TEXT USING employee_id::text;

-- Archive employee documents
ALTER TABLE employee_documents_archive
ALTER COLUMN employee_id TYPE TEXT USING employee_id::text;

-- Archive contracts
ALTER TABLE employee_contracts_archive
ALTER COLUMN employee_id TYPE TEXT USING employee_id::text;

-- Archive users
ALTER TABLE users_archive
ALTER COLUMN employee_id TYPE TEXT USING employee_id::text;
ALTER TABLE employee_dependents_archive ALTER COLUMN employee_id TYPE text;
ALTER TABLE employee_documents_archive ALTER COLUMN employee_id TYPE text;
ALTER TABLE employee_attendance_archive ALTER COLUMN employee_id TYPE text;
ALTER TABLE incident_reports_archive ALTER COLUMN employee_id TYPE text;
ALTER TABLE employee_contracts_archive ALTER COLUMN employee_id TYPE text;
ALTER TABLE users_archive ALTER COLUMN employee_id TYPE text;
